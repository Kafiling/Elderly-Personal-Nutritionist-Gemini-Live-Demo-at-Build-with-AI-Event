import React, { useState, useEffect, useCallback } from 'react';
import { GoogleGenAI } from "@google/genai"; 
import Header from './components/Header';
import ImageUploader from './components/ImageUploader';
import PreferenceForm from './components/PreferenceForm';
import MealCard from './components/MealCard';
import RecipeDisplay from './components/RecipeDisplay';
import LoadingSpinner from './components/LoadingSpinner';
import Section from './components/shared/Section';
import Button from './components/shared/Button';
import { AppView, Meal, Recipe, UserPreferences } from './types';
import { analyzeRefrigeratorImage, generatePersonalizedMenu, generateRecipe, generateMealImage } from './services/geminiService';
import { DEFAULT_USER_PREFERENCES } from './constants';
import { useLanguage, TranslationKey, Locale } from './src/contexts/LanguageContext';

const App: React.FC = () => {
  const { t, language } = useLanguage(); // Added language here
  const [currentView, setCurrentView] = useState<AppView>('upload');
  const [apiKeyExists, setApiKeyExists] = useState<boolean>(false);

  const [analyzedIngredients, setAnalyzedIngredients] = useState<string[] | null>(null);
  const [userPreferences, setUserPreferences] = useState<UserPreferences>(DEFAULT_USER_PREFERENCES);
  
  const [suggestedMeals, setSuggestedMeals] = useState<Meal[] | null>(null);
  const [selectedMeal, setSelectedMeal] = useState<Meal | null>(null);
  const [currentRecipe, setCurrentRecipe] = useState<Recipe | null>(null);
  const [currentMealImage, setCurrentMealImage] = useState<string | null>(null);

  const [isLoading, setIsLoading] = useState(false);
  const [loadingMessageKey, setLoadingMessageKey] = useState<TranslationKey | ''>('');
  const [errorKey, setErrorKey] = useState<TranslationKey | ''>('');
  const [errorMessageArg, setErrorMessageArg] = useState<string | null>(null);
  const [isLoadingRecipeImage, setIsLoadingRecipeImage] = useState(false);

  useEffect(() => {
    if (process.env.API_KEY) {
      setApiKeyExists(true);
    } else {
      setErrorKey('apiKeyMissingError');
      setCurrentView('error'); 
    }
  }, [t]);

  const handleImageAnalyzed = (ingredients: string[]) => {
    setAnalyzedIngredients(ingredients);
    if (ingredients.length === 0) {
      setErrorKey('noIngredientsOrUnclear');
    } else {
      setErrorKey(''); 
      setErrorMessageArg(null);
    }
    setCurrentView('preferences');
    setIsLoading(false);
  };
  
  const handleAnalysisError = (errorMessage: string) => {
    // errorMessage is already translated or a direct message from ImageUploader
    setErrorKey('' as TranslationKey); // Clear key if we use direct message
    setErrorMessageArg(errorMessage); // Show the direct message
    setAnalyzedIngredients([]); 
    setCurrentView('preferences'); 
    setIsLoading(false);
  };

  // Wrapped analyzeImage call to pass language
  const callAnalyzeImage = async (base64ImageData: string) => {
    return analyzeRefrigeratorImage(base64ImageData, language);
  };

  const handlePreferencesSubmit = async (preferences: UserPreferences) => {
    setUserPreferences(preferences);
    setIsLoading(true);
    setLoadingMessageKey('generatingMealSuggestions');
    setErrorKey('');
    setErrorMessageArg(null);
    try {
      const ingredientsForMenu = analyzedIngredients && analyzedIngredients.length > 0 ? analyzedIngredients : [];
      const meals = await generatePersonalizedMenu(ingredientsForMenu, preferences, language); // Pass language
      setSuggestedMeals(meals);
      if (meals.length === 0) {
        setErrorKey('failedToGenerateMeals');
      }
      setCurrentView('meals');
    } catch (err: any) {
      setErrorKey('' as TranslationKey);
      setErrorMessageArg(err.message || t('failedToGenerateMeals'));
    } finally {
      setIsLoading(false);
    }
  };

  const handleViewRecipe = async (meal: Meal) => {
    setSelectedMeal(meal);
    setIsLoading(true);
    setLoadingMessageKey('fetchingRecipeDetails');
    setCurrentRecipe(null); 
    setCurrentMealImage(null); 
    setErrorKey('');
    setErrorMessageArg(null);
    
    try {
      const recipeDetails = await generateRecipe(meal.name, meal.mainIngredients, language); // Pass language
      setCurrentRecipe(recipeDetails);
      setCurrentView('recipe');
      
      setIsLoadingRecipeImage(true);
      try {
        // meal.name might already be in Thai if generated by generatePersonalizedMenu in Thai
        const imageUrl = await generateMealImage(meal.name); 
        setCurrentMealImage(imageUrl);
      } catch (imgErr: any) {
        console.warn("Failed to generate meal image:", imgErr.message);
        setCurrentMealImage(null); 
      } finally {
        setIsLoadingRecipeImage(false);
      }

    } catch (err: any) {
      setErrorKey('' as TranslationKey);
      setErrorMessageArg(err.message || t('failedToFetchRecipe'));
      setCurrentView('meals'); 
    } finally {
      setIsLoading(false);
    }
  };

  const resetApp = () => {
    setCurrentView('upload');
    setAnalyzedIngredients(null);
    setUserPreferences(DEFAULT_USER_PREFERENCES);
    setSuggestedMeals(null);
    setSelectedMeal(null);
    setCurrentRecipe(null);
    setCurrentMealImage(null);
    setErrorKey('');
    setErrorMessageArg(null);
    setIsLoading(false);
  };

  const displayError = errorKey ? t(errorKey) : errorMessageArg;
  
  const renderContent = () => {
    if (!apiKeyExists && currentView !== 'error') {
        return (
           <Section title={t('applicationErrorTitle')} delay={100}>
             <p className="text-red-600 text-lg text-center">
               {t('apiKeyMissingError')}
             </p>
           </Section>
        );
    }

    if (isLoading && loadingMessageKey) {
      return <div className="flex justify-center items-center min-h-[60vh]"><LoadingSpinner message={t(loadingMessageKey)} size="large" /></div>;
    }

    switch (currentView) {
      case 'upload':
        return (
          <Section title={t('uploadViewTitle')} key="upload-view" delay={100}>
            <p className="text-gray-600 mb-6 text-lg">
              {t('uploadViewDesc')}
            </p>
            <ImageUploader 
              onImageAnalyzed={handleImageAnalyzed} 
              onAnalysisError={handleAnalysisError}
              analyzeImage={callAnalyzeImage} // Use wrapped call
            />
             {displayError && <p className="text-red-500 mt-4 text-center">{displayError}</p>}
          </Section>
        );
      case 'preferences':
        return (
          <Section title={t('prefsViewTitle')} key="preferences-view" delay={100}>
             <p className="text-gray-600 mb-2 text-lg">
              {t('prefsViewDesc')}
            </p>
            {analyzedIngredients && ( 
                <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <h3 className="font-semibold text-blue-700">{t('identifiedIngredients')}</h3>
                    {analyzedIngredients.length > 0 ? (
                        <p className="text-sm text-gray-700">{analyzedIngredients.join(', ')}</p>
                    ) : (
                        <p className="text-sm text-gray-500">{t('noIngredientsIdentified')}</p>
                    )}
                </div>
            )}
            {displayError && <p className="text-red-500 mb-4 text-center">{displayError}</p>}
            <PreferenceForm 
              initialPreferences={userPreferences} 
              onSubmit={handlePreferencesSubmit}
              isLoading={isLoading}
            />
            <Button onClick={() => setCurrentView('upload')} variant="ghost" className="mt-6">
              {t('backToImageUpload')}
            </Button>
          </Section>
        );
      case 'meals':
        return (
          <Section title={t('mealsViewTitle')} key="meals-view" delay={100}>
            {displayError && <p className="text-red-500 mb-4 text-center">{displayError}</p>}
            {(!suggestedMeals || suggestedMeals.length === 0) && !isLoading && !displayError && (
              <p className="text-gray-500 text-center py-8 text-lg">{t('noMealSuggestions')}</p>
            )}
            {suggestedMeals && suggestedMeals.length > 0 && (
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                {suggestedMeals.map((meal, index) => (
                  <MealCard key={meal.name + index} meal={meal} onViewRecipe={handleViewRecipe} delay={index * 100} />
                ))}
              </div>
            )}
            <div className="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
              <Button onClick={() => setCurrentView('preferences')} variant="ghost">
                {t('adjustPreferences')}
              </Button>
              <Button onClick={resetApp} variant="secondary">
                {t('startOver')}
              </Button>
            </div>
          </Section>
        );
      case 'recipe':
        return (
          <Section title={selectedMeal?.name || t('recipeViewTitlePlaceholder')} key="recipe-view" delay={100}>
            <RecipeDisplay recipe={currentRecipe} mealImage={currentMealImage} isLoadingImage={isLoadingRecipeImage} />
            <div className="mt-10 flex flex-col sm:flex-row gap-4 justify-center">
              <Button onClick={() => setCurrentView('meals')} variant="ghost">
                {t('backToMealSuggestions')}
              </Button>
               <Button onClick={resetApp} variant="secondary">
                {t('startOver')}
              </Button>
            </div>
          </Section>
        );
      case 'error':
         return (
            <Section title={t('applicationErrorTitle')} className="border-red-500 border-2" key="error-view" delay={100}>
                <div className="text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-16 h-16 text-red-500 mx-auto mb-4">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126ZM12 15.75h.007v.008H12v-.008Z" />
                    </svg>
                    <p className="text-red-600 text-xl mb-2">{t('errorOccurred')}</p>
                    <p className="text-gray-700 mb-6">{displayError || t('unspecifiedError')}</p>
                    { !apiKeyExists && 
                        <p className="text-gray-600 text-sm" dangerouslySetInnerHTML={{ __html: t('apiKeyMissingDetail') }}></p> 
                    }
                    <Button onClick={resetApp} variant="primary" className="mt-6">
                        {t('tryStartingOver')}
                    </Button>
                </div>
            </Section>
         );
      default:
        return <p>Unknown view</p>;
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-100">
      <Header title="appTitle" /> {/* Pass translation key */}
      <main className="container mx-auto px-4 sm:px-6 lg:px-8 py-8 flex-grow">
        {renderContent()}
      </main>
      <footer className="bg-gray-900 text-gray-300 text-center p-4">
        <p>{t('footerText', { year: new Date().getFullYear() })}</p>
      </footer>
    </div>
  );
};

export default App;